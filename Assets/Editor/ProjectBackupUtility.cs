#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Linq;

public static class ProjectBackupUtility
{
    static string MakeBackupRoot()
    {
        string root = "Assets/_Backups";
        if (!AssetDatabase.IsValidFolder(root))
            AssetDatabase.CreateFolder("Assets", "_Backups");

        string stamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
        string folderName = "ProjectSnapshot_" + stamp;
        AssetDatabase.CreateFolder(root, folderName);
        return Path.Combine(root, folderName).Replace("\\", "/");
    }

    [MenuItem("Tools/Project/Backup Snapshot (Docs + Scripts + .unitypackage)")]
    public static void MakeSnapshot()
    {
        string backupRoot = MakeBackupRoot();
        string docsDir    = Path.Combine(backupRoot, "Docs").Replace("\\", "/");
        string scriptsDir = Path.Combine(backupRoot, "Scripts").Replace("\\", "/");

        Directory.CreateDirectory(docsDir);
        Directory.CreateDirectory(scriptsDir);

        CopyTree("Assets/Scripts", Path.Combine(scriptsDir, "Scripts"));
        CopyTree("Assets/Editor",  Path.Combine(scriptsDir, "Editor"));

        string readmePath = Path.Combine(docsDir, "README_ProjectGuidelines.md").Replace("\\", "/");
        File.WriteAllText(readmePath, "Snapshot generated by ProjectBackupUtility.", System.Text.Encoding.UTF8);

        string pkgPath = Path.Combine(backupRoot, "Scripts_Snapshot.unitypackage").Replace("\\", "/");
        var exportPaths = new[] { "Assets/Scripts", "Assets/Editor" }
            .Where(AssetDatabase.IsValidFolder)
            .ToArray();
        if (exportPaths.Length > 0)
            AssetDatabase.ExportPackage(exportPaths, pkgPath, ExportPackageOptions.Recurse);

        AssetDatabase.Refresh();
        EditorUtility.RevealInFinder(backupRoot);
        EditorUtility.DisplayDialog("완료", "스냅샷이 생성되었습니다:\n" + backupRoot, "확인");
    }

    static void CopyTree(string srcRoot, string dstRoot)
    {
        if (!AssetDatabase.IsValidFolder(srcRoot)) return;
        Directory.CreateDirectory(dstRoot);

        var files = Directory.GetFiles(srcRoot, "*.*", SearchOption.AllDirectories)
                             .Where(p => p.EndsWith(".cs", StringComparison.OrdinalIgnoreCase) ||
                                         p.EndsWith(".asmdef", StringComparison.OrdinalIgnoreCase))
                             .ToArray();

        foreach (var src in files)
        {
            string rel = src.Replace("\\", "/").Substring(srcRoot.Length).TrimStart('/');
            string dst = Path.Combine(dstRoot, rel).Replace("\\", "/");
            Directory.CreateDirectory(Path.GetDirectoryName(dst)!);
            File.Copy(src, dst, overwrite: true);
        }
    }
}
#endif
